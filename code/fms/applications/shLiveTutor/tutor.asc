
// set up all shared objects and data structures needed to function
application.onAppStart = function() {
trace("IN QUEUE");
	// retrieve the last used roomID from a persistent private shared object
	this.lastCustomerID_so = SharedObject.get("private/lastID", true);
	if (this.lastCustomerID_so.size() == 0) {
		this.lastCustomerID = 0;
		this.lastCustomerID_so.setProperty("id", this.lastCustomerID);
	}
	this.lastCustomerID = this.lastCustomerID_so.getProperty("id");
	
	// this shared object saves the name of the customer
	this.queues_so = SharedObject.get("public/queues",true);
};

// 2 types of clients connect to this app: .swf movies and room app instances
// onConnect needs to be smart enough to determine which type it is dealing with
application.onConnect = function(client) {
	// clients cannot write to any shared object (or stream) directly
	client.writeAccess = "";
	
	// check the client.agent property and the app name
	if ((client.agent.substr(0,8) == "FlashCom") && (client.referrer.split("/")[3] == "shLiveTutor")) {
		trace("This is a connection from .asc!");
	} else {
		trace("This is a connection from a .swf movie!");
		
		// .swf movies can read the public shared objects and streams
		//client.readAccess = "public";
		//client.writeAccess = "";
		
		// attach only the methods we want this client to be able to call
		client.addCustomer = swf_addCustomer;
		//client.removeCustomer = swf_removeCustomer;

	}
	application.acceptConnection(client);
};

// called by the queue clients to add a new customer name
function swf_addCustomer(customerName) {
	trace("swf_addCustomer: " + customerName);
	
	// increment the lastCustomerID counter and save it in the shared object
	application.lastCustomerID++;
	application.lastCustomerID_so.setProperty("id", application.lastCustomerID);
	
	// create a unique customerID that's hard to guess
	var customerID = "c" + application.lastCustomerID + "r" + Math.round(Math.random()*1000);
	
	// save an entry for the new customer in the public queues_so RSO
	// this will trigger an onSync() on the clients
	application.queues_so.setProperty(customerID, {name:customerName});
	
	trace("New customer added: " + customerID + ", " + customerName);
}
