load( "framework.asc" );
application.onAppStart = function() {
	queue_so = SharedObject.get("queue_so");
	application.allowDebug = true;
	trace("the queue app has started");
}

application.onConnect = function(client, uname) {
	gFrameworkFC.getClientGlobals(client).username = uname;
	//trace(uname + " has connected");

	client.setLeftEarly = function(tutorLineName, studentObjName, endTime) {
		trace("setLeftEarly: " + tutorLineName + "  " + studentObjName);
		tutorLine_so = SharedObject.get(tutorLineName);
			
		studentObj = tutorLine_so.getProperty(studentObjName);
		studentObj._leftEarly = true;
		studentObj._endTime = endTime;
		tutorLine_so.setProperty(studentObjName, studentObj);
	}
	
	client.setEngaged = function(tutorLineName, studentObjName, teacherID, stampDate, timeDiff){
			
		tutorLine_so = SharedObject.get(tutorLineName);
			
		studentObj = tutorLine_so.getProperty(studentObjName);
		studentObj._engaged = true;
		studentObj._timeEngaged = stampDate;
		studentObj._chatInstance = teacherID + "_" + studentObj.username + "_" + stampDate; 
		tutorLine_so.setProperty(studentObjName, studentObj);
	}
	
	client.removeStudent = function (tutorLineName, studentObjName) {
		tutorLine_so = SharedObject.get(tutorLineName);
		tutorLine_so.setProperty(studentObjName, null);
	}
	
	client.clearAllStudents = function (tutorLineName) {
		trace("clearing all students");
		tutorLine_so = SharedObject.get(tutorLineName);
		tutorLine_so.clear();
	}
	
	client.myTest = function(p_state, p_lang, p_mathCert)
		
	{
		trace(" ");
		trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>New Queue Request>>>>>>>>>>>>>>>>")
		var returnObj = new Array();
		var returnValue = "notSet";
		var returnName = "none";
		var returnGender = "female";
		trace("the number of tutors online is : " + queue_so.size());
		
		if(queue_so.size() > 0)
		{
			
			var tutorArray = new Array();
			
			
			var soNames= queue_so.getPropertyNames();
			var i = 0;
			var numTutors = 0;
			
			while(i<queue_so.size())
			{
				trace("this is looking for : " + soNames[i] + queue_so.getProperty(soNames[i])._tutorName);
				
				if (queue_so.getProperty(soNames[i])._acceptingStudents == true)
				{
						
					tutorArray[numTutors] = queue_so.getProperty(soNames[i]);
					
					
					if(tutorArray[numTutors]._language.toLowerCase() ==  p_lang.toLowerCase())
					{
						tutorArray[numTutors]._bitArray = 1;
					}
					else
					{
						tutorArray[numTutors]._bitArray = 0;
					}
					//trace("first : " + tutorArray[numTutors]._bitArray);
					tutorArray[numTutors]._bitArray <<= 1;
					
					//trace("the two math certs are " +tutorArray[numTutors]._mathCertified + " : " + p_mathCert);
					
					if(tutorArray[numTutors]._mathCertified ==  p_mathCert)
					{
	
						tutorArray[numTutors]._bitArray += 1;
					}
					//trace("second : " + tutorArray[numTutors]._bitArray);
					tutorArray[numTutors]._bitArray <<= 1;
					
					
					if(tutorArray[numTutors]._state.toLowerCase() ==  p_state.toLowerCase())
					{
						tutorArray[numTutors]._bitArray += 1;
					}
					
					//tutorArray[i]._bitArray <<= 1;
					
					//trace("the final is :" + tutorArray[numTutors]._bitArray);
					//returnValue = returnValue + "this is my test" + tutorArray[i]._tutorName + " : " + tutorArray.length; //+ " : " + 
					//p_lang + p_mathCert + p_state;
					i++;
					numTutors++;
				}
				else
				{
					i++;
				}
			}
			
			if(numTutors > 0)
			{
			
				//trace("the first value before teh sort is : " + tutorArray[0]._bitArray);			
				tutorArray = myBubbleSort(tutorArray,"_bitArray");
				//trace("the first value after teh sort is : " + tutorArray[0]._bitArray);			
				
				i = 0;
				var temp_so;
				var leastPercentBusy = 10000;
				var leastBusyTutorLine;
				var leastBusyTutorName;
				var leastBusyGender;
				while(i<tutorArray.length)
				{
					//trace("loop : " + i);
					tempso = SharedObject.get(tutorArray[i]._tutorLineName);
					trace("Checking Queue for : " + tutorArray[i]._tutorName  +  " Max students : " + tutorArray[i]._maxStudents + " number in queue : " + tempso.size());
					if (tempso.size() < tutorArray[i]._maxStudents)
					{
						trace("the tutor " + tutorArray[i]._tutorName + " can take the student.");
						returnValue = tutorArray[i]._tutorLineName;
						returnName = tutorArray[i]._tutorName;
						returnGender = tutorArray[i]._gender;
						i = tutorArray.length;
					}
					else
					{
						
						tutorArray[i]._percentBusy = (tempso.size()/tutorArray[i]._maxStudents * 100);
						if (tutorArray[i]._percentBusy < leastPercentBusy)
						{
							leastPercentBusy = tutorArray[i]._percentBusy;
							leastBusyTutorLine = tutorArray[i]._tutorLineName;
							leastBusyTutorName = tutorArray[i]._tutorName;
							leastBusyGender = tutorArray[i]._gender;							
						}
						trace("the tutor " + tutorArray[i]._tutorName + " is " + tutorArray[i]._percentBusy + " percent busy");
						i++;
					}
				}
				if (returnValue == "notSet")
				{
					//this should get the least busy tutor.
					returnValue =  leastBusyTutorLine;
					returnName = leastBusyTutorName;
					returnGender = leastBusyGender;
				}
				
			}
			else
			{
				//This means that there are no tutors online
				returnValue = "none";
			}

		}
		else
		{
			//This means that there are no tutors online
			returnValue = "none";
		}
		
		
		returnObj[0] = returnValue;
		returnObj[1] = returnName;
		returnObj[2] = returnGender;
		returnObj[3] = new Date().getTime().toString();
		trace("request sent to : " + returnName);
		trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>End Queue Request>>>>>>>>>>>>>>>>")
		return returnObj;
		
	};


	client.getStartTime = function()
	{
		var now = new Date();
		return now.getTime().toString();
	}

	application.acceptConnection(client);
	
};
application.onDisconnect = function(client) {
	var userInfo = gFrameworkFC.getClientGlobals(client);	
	trace("shQueue onDisconnect: " + userInfo.username + " has disconnected.");
	queue_so.setProperty("t_"+userInfo.username,null);
	
	//trace("Student " + userInfo.username + " has disconnected.");
	for (var i = 0; i < application.clients.length; i++) {
		var c = application.clients[i];				
		c.call("disconnect_s",null,userInfo.username, new Date().getTime().toString());
	}
	
	queue_so.setProperty("s_"+userInfo.username,null);
	//trace(userInfo.username+" disconnected!!!!!!!!");
};

function myBubbleSort(a, sortColumn)
{        
	//trace("in the bubble sort :" + typeof(a));
	if (typeof(a) == "undefined")
	{
		return a;
	}
	else
	{
		var i = 0;
		
		while (i < a.length-1)
		{
			
			if(a[i][sortColumn] < a[i+1][sortColumn])
			{
				var tempVal1 = a[i];
				var tempVal2 = a[i+1];
				
				a[i] = tempVal2;
				a[i+1] = tempVal1;
				
				i =0;
			}
			else
			{
				i++;
			}
		}
			
		return a;
	}
}

/*
load( "framework.asc" );
application.onAppStart = function() {
	queue_so = SharedObject.get("queue_so");
	
};
application.onConnect = function(client, uname) {
	gFrameworkFC.getClientGlobals(client).username = uname;
	trace(uname + " has connected");
	application.acceptConnection(client);
};
application.onDisconnect = function(client) {
	var userInfo = gFrameworkFC.getClientGlobals(client);
	queue_so.setProperty("t_"+userInfo.username,null);

	trace("Student " + userInfo.username + " has disconnected.");
	for (var i = 0; i < application.clients.length; i++) {
		var c = application.clients[i];
		c.call("disconnect_s",null,userInfo.username);
	}
	
	queue_so.setProperty("s_"+userInfo.username,null);
	trace(userInfo.username+" disconnected!!!!!!!!");
};
*/